# Enhanced upstreams with automatic failover for DC3
upstream dc1_services {
    server 192.168.100.10:80 max_fails=2 fail_timeout=10s;
    server 192.168.100.20:80 backup;  # DC2 as backup for DC1
    server 127.0.0.1:80 backup weight=1;  # Local DC3 as last resort
}

upstream dc2_services {
    server 192.168.100.20:80 max_fails=2 fail_timeout=10s;
    server 192.168.100.10:80 backup;  # DC1 as backup for DC2
    server 127.0.0.1:80 backup weight=1;  # Local DC3 as last resort
}

upstream discovery_service {
    server 172.22.1.80:8500 max_fails=1 fail_timeout=5s;  # Local discovery service
    server 192.168.100.40:8500 backup;  # Backup discovery via backbone
}

# Multi-datacenter resilient upstream for critical services (DC3 perspective)
upstream resilient_gateway {
    server 192.168.100.30:80 weight=3;  # DC3 primary (local)
    server 192.168.100.10:80 weight=2;  # DC1 secondary
    server 192.168.100.20:80 weight=1;  # DC2 tertiary
}

server {
    listen 80;
    server_name localhost;

    # Default route - serves DC3 (Asia-Pacific)
    location / {
        root /usr/share/nginx/html;
        try_files /dc3.html /index.html;
        add_header X-Datacenter "DC3-Asia-Pacific";
        add_header X-Region "Asia-Pacific";
    }

    # Datacenter-specific routes
    location /dc1 {
        root /usr/share/nginx/html;
        try_files /index.html =404;
        add_header X-Datacenter "DC3-serving-DC1-content";
    }

    location /dc2 {
        root /usr/share/nginx/html;
        try_files /dc2.html =404;
        add_header X-Datacenter "DC3-serving-DC2-content";
    }

    location /dc3 {
        root /usr/share/nginx/html;
        try_files /dc3.html =404;
        add_header X-Datacenter "DC3-Local";
    }

    # Cross-datacenter proxy routing with failover
    location /route/dc1/ {
        proxy_pass http://dc1_services/;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC3";
        add_header X-Routing "DC3-to-DC1-Proxy";
        add_header X-Route-Path "192.168.100.30->192.168.100.10";
        add_header X-Failover-Enabled "true";
        add_header X-Backup-Available "DC2,DC3";
        
        # Handle errors gracefully
        error_page 502 503 504 = @dc1_fallback;
    }

    location /route/dc2/ {
        proxy_pass http://dc2_services/;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC3";
        add_header X-Routing "DC3-to-DC2-Proxy";
        add_header X-Route-Path "192.168.100.30->192.168.100.20";
        add_header X-Failover-Enabled "true";
        add_header X-Backup-Available "DC1,DC3";
        
        # Handle errors gracefully
        error_page 502 503 504 = @dc2_fallback;
    }

    # Resilient routing for critical services
    location /route/resilient/ {
        proxy_pass http://resilient_gateway/;
        proxy_connect_timeout 2s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC3";
        add_header X-Routing "DC3-Resilient-Load-Balanced";
        add_header X-Load-Balance "3:2:1";
        add_header X-Failover-Type "automatic";
    }

    # Local service discovery access
    location /api/discovery {
        proxy_pass http://discovery_service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header X-Routing "DC3-Local-Discovery";
        add_header X-Discovery-Location "DC3-Local-Service";
    }

    # Enhanced health check endpoint
    location /health {
        return 200 '{"status":"healthy","service":"gateway","datacenter":"${DATACENTER_ID}","inter_dc_routing":{"dc1":"192.168.100.10","dc2":"192.168.100.20","discovery":"local"},"capabilities":["cross_dc_proxy","local_discovery","disaster_recovery"]}';
        add_header Content-Type application/json;
        add_header X-Datacenter "DC3";
    }

    # Routing status endpoint
    location /api/routing {
        return 200 '{"routing_table":{"local":"172.22.1.10","dc3_backbone":"192.168.100.30","dc1_gateway":"192.168.100.10","dc2_gateway":"192.168.100.20","discovery":"172.22.1.80"},"status":"active","type":"disaster_recovery_gateway"}';
        add_header Content-Type application/json;
    }

    # API endpoint to get datacenter info
    location /api/datacenter {
        return 200 '{"current_datacenter":"${DATACENTER_ID}","region":"${REGION}","type":"Standby","available_datacenters":["DC1","DC2","DC3"],"inter_dc_connectivity":true}';
        add_header Content-Type application/json;
    }

    # Fallback handlers for failed datacenters
    location @dc1_fallback {
        return 200 '{
            "message": "DC1 unavailable - serving fallback response",
            "primary_dc": "DC1",
            "fallback_source": "DC3",
            "status": "degraded_service",
            "timestamp": "$time_iso8601",
            "retry_after": "30s"
        }';
        add_header Content-Type application/json;
        add_header X-Fallback-Active "true";
        add_header X-Original-Target "DC1";
        add_header X-Fallback-Reason "Service-Unavailable";
    }

    location @dc2_fallback {
        return 200 '{
            "message": "DC2 unavailable - serving fallback response", 
            "primary_dc": "DC2",
            "fallback_source": "DC3",
            "status": "degraded_service",
            "timestamp": "$time_iso8601",
            "retry_after": "30s"
        }';
        add_header Content-Type application/json;
        add_header X-Fallback-Active "true";
        add_header X-Original-Target "DC2";
        add_header X-Fallback-Reason "Service-Unavailable";
    }

    # Global fallback for any unhandled errors
    location @global_fallback {
        return 503 '{
            "message": "Service temporarily unavailable",
            "datacenter": "DC3",
            "status": "service_degraded",
            "available_services": ["local"],
            "timestamp": "$time_iso8601"
        }';
        add_header Content-Type application/json;
        add_header X-Global-Fallback "true";
    }
}
