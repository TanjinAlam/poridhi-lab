# Enhanced upstreams with automatic failover
upstream dc2_services {
    server 192.168.100.20:80 max_fails=2 fail_timeout=10s;
    server 192.168.100.30:80 backup;  # DC3 as backup for DC2
    server 127.0.0.1:80 backup weight=1;  # Local DC1 as last resort
}

upstream dc3_services {
    server 192.168.100.30:80 max_fails=2 fail_timeout=10s;
    server 192.168.100.20:80 backup;  # DC2 as backup for DC3
    server 127.0.0.1:80 backup weight=1;  # Local DC1 as last resort
}

upstream discovery_service {
    server 192.168.100.40:8500 max_fails=1 fail_timeout=5s;
    server 192.168.100.30:8500 backup;  # DC3 local discovery as backup
}

# Multi-datacenter resilient upstream for critical services
upstream resilient_gateway {
    server 192.168.100.10:80 weight=3;  # DC1 primary
    server 192.168.100.20:80 weight=2;  # DC2 secondary
    server 192.168.100.30:80 weight=1;  # DC3 disaster recovery
}

server {
    listen 80;
    server_name localhost;

    # Default route - serves DC1 (Primary)
    location / {
        root /usr/share/nginx/html;
        try_files /index.html =404;
        add_header X-Datacenter "DC1-Primary";
        add_header X-Region "North-America";
    }

    # Datacenter-specific routes
    location /dc1 {
        root /usr/share/nginx/html;
        try_files /index.html =404;
        add_header X-Datacenter "DC1-Local";
    }

    location /dc2 {
        root /usr/share/nginx/html;
        try_files /dc2.html =404;
        add_header X-Datacenter "DC1-serving-DC2-content";
    }

    location /dc3 {
        root /usr/share/nginx/html;
        try_files /dc3.html =404;
        add_header X-Datacenter "DC1-serving-DC3-content";
    }

    # Cross-datacenter proxy routing with failover
    location /route/dc2/ {
        proxy_pass http://dc2_services/;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC1";
        add_header X-Routing "DC1-to-DC2-Proxy";
        add_header X-Route-Path "192.168.100.10->192.168.100.20";
        add_header X-Failover-Enabled "true";
        add_header X-Backup-Available "DC3,DC1";
        
        # Handle errors gracefully - Fixed syntax
        error_page 502 503 504 @dc2_fallback;
    }

    location /route/dc3/ {
        proxy_pass http://dc3_services/;
        proxy_connect_timeout 3s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC1";
        add_header X-Routing "DC1-to-DC3-Proxy";
        add_header X-Route-Path "192.168.100.10->192.168.100.30";
        add_header X-Failover-Enabled "true";
        add_header X-Backup-Available "DC2,DC1";
        
        # Handle errors gracefully - Fixed syntax
        error_page 502 503 504 @dc3_fallback;
    }

    # Resilient routing for critical services
    location /route/resilient/ {
        proxy_pass http://resilient_gateway/;
        proxy_connect_timeout 2s;
        proxy_read_timeout 5s;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Routed-From "DC1";
        add_header X-Routing "DC1-Resilient-Load-Balanced";
        add_header X-Load-Balance "3:2:1";
        add_header X-Failover-Type "automatic";
    }

    # Cross-datacenter service discovery access
    location /api/discovery {
        proxy_pass http://discovery_service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header X-Routing "DC1-to-Discovery-Service";
        add_header X-Discovery-Location "DC3-via-Backbone";
    }

    # Enhanced health check endpoint
    location /health {
        return 200 '{"status":"healthy","service":"gateway","datacenter":"${DATACENTER_ID}","inter_dc_routing":{"dc2":"192.168.100.20","dc3":"192.168.100.30","discovery":"192.168.100.40"},"capabilities":["cross_dc_proxy","service_discovery","load_balancing"]}';
        add_header Content-Type application/json;
        add_header X-Datacenter "DC1";
    }

    # Routing status endpoint
    location /api/routing {
        return 200 '{"routing_table":{"local":"172.20.1.10","dc1_backbone":"192.168.100.10","dc2_gateway":"192.168.100.20","dc3_gateway":"192.168.100.30","discovery":"192.168.100.40"},"status":"active","type":"primary_gateway"}';
        add_header Content-Type application/json;
    }

    # API endpoint to get datacenter info
    location /api/datacenter {
        return 200 '{"current_datacenter":"${DATACENTER_ID}","region":"${REGION}","type":"Primary","available_datacenters":["DC1","DC2","DC3"],"inter_dc_connectivity":true}';
        add_header Content-Type application/json;
    }

    # Fallback handlers for failed datacenters
    location @dc2_fallback {
        return 200 '{
            "message": "DC2 unavailable - serving fallback response",
            "primary_dc": "DC2",
            "fallback_source": "DC1",
            "status": "degraded_service",
            "timestamp": "$time_iso8601",
            "retry_after": "30s"
        }';
        add_header Content-Type application/json;
        add_header X-Fallback-Active "true";
        add_header X-Original-Target "DC2";
        add_header X-Fallback-Reason "Service-Unavailable";
    }

    location @dc3_fallback {
        return 200 '{
            "message": "DC3 unavailable - serving fallback response", 
            "primary_dc": "DC3",
            "fallback_source": "DC1",
            "status": "degraded_service",
            "timestamp": "$time_iso8601",
            "retry_after": "30s"
        }';
        add_header Content-Type application/json;
        add_header X-Fallback-Active "true";
        add_header X-Original-Target "DC3";
        add_header X-Fallback-Reason "Service-Unavailable";
    }

    # Global fallback for any unhandled errors
    location @global_fallback {
        return 503 '{
            "message": "Service temporarily unavailable",
            "datacenter": "DC1",
            "status": "service_degraded",
            "available_services": ["local"],
            "timestamp": "$time_iso8601"
        }';
        add_header Content-Type application/json;
        add_header X-Global-Fallback "true";
    }
}